// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamillosantos/services-healthcheck/hchttp (interfaces: Healthchecker,ServeMux)

// Package hchttp is a generated GoMock package.
package hchttp

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	svchealthcheck "github.com/jamillosantos/services-healthcheck"
)

// MockHealthchecker is a mock of Healthchecker interface.
type MockHealthchecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthcheckerMockRecorder
}

// MockHealthcheckerMockRecorder is the mock recorder for MockHealthchecker.
type MockHealthcheckerMockRecorder struct {
	mock *MockHealthchecker
}

// NewMockHealthchecker creates a new mock instance.
func NewMockHealthchecker(ctrl *gomock.Controller) *MockHealthchecker {
	mock := &MockHealthchecker{ctrl: ctrl}
	mock.recorder = &MockHealthcheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthchecker) EXPECT() *MockHealthcheckerMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockHealthchecker) Health(arg0 context.Context) *svchealthcheck.CheckResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(*svchealthcheck.CheckResponse)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockHealthcheckerMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockHealthchecker)(nil).Health), arg0)
}

// Ready mocks base method.
func (m *MockHealthchecker) Ready(arg0 context.Context) *svchealthcheck.CheckResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0)
	ret0, _ := ret[0].(*svchealthcheck.CheckResponse)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockHealthcheckerMockRecorder) Ready(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockHealthchecker)(nil).Ready), arg0)
}

// MockServeMux is a mock of ServeMux interface.
type MockServeMux struct {
	ctrl     *gomock.Controller
	recorder *MockServeMuxMockRecorder
}

// MockServeMuxMockRecorder is the mock recorder for MockServeMux.
type MockServeMuxMockRecorder struct {
	mock *MockServeMux
}

// NewMockServeMux creates a new mock instance.
func NewMockServeMux(ctrl *gomock.Controller) *MockServeMux {
	mock := &MockServeMux{ctrl: ctrl}
	mock.recorder = &MockServeMuxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServeMux) EXPECT() *MockServeMuxMockRecorder {
	return m.recorder
}

// HandleFunc mocks base method.
func (m *MockServeMux) HandleFunc(arg0 string, arg1 func(http.ResponseWriter, *http.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleFunc", arg0, arg1)
}

// HandleFunc indicates an expected call of HandleFunc.
func (mr *MockServeMuxMockRecorder) HandleFunc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFunc", reflect.TypeOf((*MockServeMux)(nil).HandleFunc), arg0, arg1)
}
