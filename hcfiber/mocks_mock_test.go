// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamillosantos/services-healthcheck/hcfiber (interfaces: Healthchecker,FiberApp)

// Package hcfiber is a generated GoMock package.
package hcfiber

import (
	context "context"
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
	svchealthcheck "github.com/jamillosantos/services-healthcheck"
)

// MockHealthchecker is a mock of Healthchecker interface.
type MockHealthchecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthcheckerMockRecorder
}

// MockHealthcheckerMockRecorder is the mock recorder for MockHealthchecker.
type MockHealthcheckerMockRecorder struct {
	mock *MockHealthchecker
}

// NewMockHealthchecker creates a new mock instance.
func NewMockHealthchecker(ctrl *gomock.Controller) *MockHealthchecker {
	mock := &MockHealthchecker{ctrl: ctrl}
	mock.recorder = &MockHealthcheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthchecker) EXPECT() *MockHealthcheckerMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockHealthchecker) Health(arg0 context.Context) *svchealthcheck.CheckResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(*svchealthcheck.CheckResponse)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockHealthcheckerMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockHealthchecker)(nil).Health), arg0)
}

// Ready mocks base method.
func (m *MockHealthchecker) Ready(arg0 context.Context) *svchealthcheck.CheckResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0)
	ret0, _ := ret[0].(*svchealthcheck.CheckResponse)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockHealthcheckerMockRecorder) Ready(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockHealthchecker)(nil).Ready), arg0)
}

// MockFiberApp is a mock of FiberApp interface.
type MockFiberApp struct {
	ctrl     *gomock.Controller
	recorder *MockFiberAppMockRecorder
}

// MockFiberAppMockRecorder is the mock recorder for MockFiberApp.
type MockFiberAppMockRecorder struct {
	mock *MockFiberApp
}

// NewMockFiberApp creates a new mock instance.
func NewMockFiberApp(ctrl *gomock.Controller) *MockFiberApp {
	mock := &MockFiberApp{ctrl: ctrl}
	mock.recorder = &MockFiberAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFiberApp) EXPECT() *MockFiberAppMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFiberApp) Get(arg0 string, arg1 ...func(*fiber.Ctx) error) fiber.Router {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(fiber.Router)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockFiberAppMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFiberApp)(nil).Get), varargs...)
}
